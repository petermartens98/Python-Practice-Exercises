# Collatz Conjecture
# A Collatz sequence is generated by repeatedly applying the following rules to an integer
# and then to each resulting integer in turn:
#   If even: divide by 2.
#   If odd: multiply by 3, then add 1.
# The Collatz algorithm has been tested and found to always reach 1 for all positive integers.
#
# Create a function that, when given two positive integers a b, returns the string "a" if integer a took fewer steps
# to reach 1 than b when passed through the Collatz sequence, or "b" if integer b took fewer steps to reach 1 than a.
# Examples:
# collatz(10, 15) ➞ "a"
# -Because 10.0 - 5.0 - 16.0 - 8.0 - 4.0 - 2.0 - 1.0: 6 steps
#        * 15.0 - 46.0 - 23.0 - 70.0 - 35.0 - 106.0 - 53.0 - 160.0 - 80.0 - 40.0 - 20.0 - 10.0 - 5.0 - 16.0
#          - 8.0 - 4.0 - 2.0 - 1.0: 17 steps
# collatz(13, 16) ➞ "b"
# collatz(53782, 72534) ➞ "b"
# Difficulty: Hard
# Date: 8/8/2021

import math

a=0
b=0

def collatz(a, b):
    asteps = 0
    bsteps = 0
    while a > 1:
        asteps +=1
        if (a %2) == 0:
            a /= 2
        else:
            a = a*3
            a += 1

    while b > 1:
        bsteps +=1
        if (b %2) == 0:
            b /= 2
        else:
            b = b*3
            b += 1

    if (asteps == bsteps):
        print("Equal steps")
    elif (asteps < bsteps):
        print("a")
    else:
        print("b")

collatz(10,15)
collatz(13,16)
collatz(53782,72534)
